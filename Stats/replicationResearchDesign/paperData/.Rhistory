sd(c(69.5,   84.0))
library(foreign)
yourData <- read.dta("beautysleep_data.dta")
yourData
names(yourData)
library(pwr)
yourData <- read.dta("beautysleep_data.dta")
install.packages('pwr')
library(pwr)
data = read.csv('SD_beauty_data.csv')
datafull <- read.dta("beautysleep_data.dta")
names(datafull)
library(pwr)
pwr.p.test(datafull$beauty)
pwr.p.test(datafull$beauty, datafull$health)
# compare with pwr.t.test()
# compare with pwr.t.test()
case1 = sample(datafull$beauty, 100)
case1
sample1 = sample(datafull$beauty, 100)
sample2 = sample(datafull$beauty, 100)
var(sample1)
var(sample2)
pwr.t.test(n=100, d=.2, sig.level=.1)
# drawing 1000 set of observations with 30 samples, alpha=0.5
# one for X	~	N(50,	5) and	one	from	X	~	N(45,5)
# declaring the observations
obs1 = vector('integer')
obs2 = vector('integer')
# first observation
obs1 = c(obs1, rnorm(30, mean=50, sd=5))
# second observation
obs2 = c(obs2, rnorm(30, mean=45, sd=5))
# running t test on both observations
ttest = t.test(obs1, obs2)
ttest
obs1 = c(obs1, rnorm(100, mean=50, sd=5))
obs2 = c(obs2, rnorm(100, mean=45, sd=5))
ttest = t.test(obs1, obs2)
ttest
pwr.t.test(n=100, d=.2, sig.level=.01) # -> 0.408049
pwr.t.test(n=100, d=.5, sig.level=.05) # -> 0.1203461
pwr.t.test(n=100, d=.3, sig.level=.03) # -> 0.1203461
pwr.t.test(d=.2, sig.level=.01, power=.9) # -> 0.1203461
# declaring the observations
obs1 = vector('integer')
obs2 = vector('integer')
# first observation
obs1 = c(obs1, rnorm(100, mean=50, sd=5))
# second observation
obs2 = c(obs2, rnorm(100, mean=45, sd=5))
# running t test on both observations
ttest = t.test(obs1, obs2)
ttest
# getting the confidence interval
ttest$conf.int
# getting the estimate means
ttest$estimate
alphas = c(0.01, 0.05)
# lets generate 1000 t-tests to better look in the properties
for (alpha in alphas) {
nTests = 1000
counterTrue = 0
counterFalse = 0
for (interable in 1:nTests) {
# take two samples from DIFFERENT populations
obs1 = rnorm(30, mean=45, sd=5)
obs2 = rnorm(30, mean=45, sd=5)
ttest = t.test(obs1, obs2)
if (ttest$p.value > alpha) {
counterTrue = counterTrue + 1
} else {
counterFalse = counterFalse + 1
}
}
print(paste("Alpha:", alpha))
print(paste("Reject hypothesis:", counterTrue))
print(paste("Accept hypothesis:", counterFalse))
}
alphas = c(0.01, 0.05)
# lets generate 1000 t-tests to better look in the properties
for (alpha in alphas) {
nTests = 100
counterTrue = 0
counterFalse = 0
for (interable in 1:nTests) {
# take two samples from DIFFERENT populations
obs1 = rnorm(30, mean=45, sd=5)
obs2 = rnorm(30, mean=45, sd=5)
ttest = t.test(obs1, obs2)
if (ttest$p.value > alpha) {
counterTrue = counterTrue + 1
} else {
counterFalse = counterFalse + 1
}
}
print(paste("Alpha:", alpha))
print(paste("Reject hypothesis:", counterFalse))
print(paste("Accept hypothesis:", counterTrue))
}
ttest(obs1)
t.test(obs1)
alphas = c(0.01, 0.05)
# lets generate 1000 t-tests to better look in the properties
for (alpha in alphas) {
nTests = 1000
counterTrue = 0
counterFalse = 0
for (interable in 1:nTests) {
# take two samples from DIFFERENT populations
obs1 = rnorm(50, mean=70, sd=3)
obs2 = rnorm(50, mean=45, sd=5)
ttest = t.test(obs1, obs2)
if (ttest$p.value > alpha) {
counterTrue = counterTrue + 1
} else {
counterFalse = counterFalse + 1
}
}
# calculating the effect size
d = (mean(obs1)-mean(obs2))/(sqrt((sd(obs1)**2) + (sd(obs2)**2)))/2
print(paste("Effect size:", d))
print(paste("Alpha:", alpha))
print(paste("Reject hypothesis:", counterFalse))
print(paste("Accept hypothesis:", counterTrue))
}
alphas = c(0.01, 0.05)
# lets generate 1000 t-tests to better look in the properties
for (alpha in alphas) {
nTests = 1000
counterTrue = 0
counterFalse = 0
for (interable in 1:nTests) {
# take two samples from DIFFERENT populations
obs1 = rnorm(50, mean=70, sd=3)
obs2 = rnorm(50, mean=45, sd=3)
ttest = t.test(obs1, obs2)
if (ttest$p.value > alpha) {
counterTrue = counterTrue + 1
} else {
counterFalse = counterFalse + 1
}
}
# calculating the effect size
d = (mean(obs1)-mean(obs2))/(sqrt((sd(obs1)**2) + (sd(obs2)**2)))/2
print(paste("Effect size:", d))
print(paste("Alpha:", alpha))
print(paste("Reject hypothesis:", counterFalse))
print(paste("Accept hypothesis:", counterTrue))
}
alphas = c(0.01, 0.05)
# lets generate 1000 t-tests to better look in the properties
for (alpha in alphas) {
nTests = 100
counterTrue = 0
counterFalse = 0
for (interable in 1:nTests) {
# take two samples from DIFFERENT populations
obs1 = rnorm(50, mean=50, sd=3)
obs2 = rnorm(50, mean=45, sd=3)
ttest = t.test(obs1, obs2)
if (ttest$p.value > alpha) {
counterTrue = counterTrue + 1
} else {
counterFalse = counterFalse + 1
}
}
# calculating the effect size
d = (mean(obs1)-mean(obs2))/(sqrt((sd(obs1)**2) + (sd(obs2)**2)))/2
print(paste("Effect size:", d))
print(paste("Alpha:", alpha))
print(paste("Reject hypothesis:", counterFalse))
print(paste("Accept hypothesis:", counterTrue))
}
alphas = c(0.01, 0.05)
# lets generate 1000 t-tests to better look in the properties
for (alpha in alphas) {
nTests = 100
counterTrue = 0
counterFalse = 0
for (interable in 1:nTests) {
# take two samples from DIFFERENT populations
obs1 = rnorm(50, mean=45, sd=3)
obs2 = rnorm(50, mean=45, sd=3)
ttest = t.test(obs1, obs2)
if (ttest$p.value > alpha) {
counterTrue = counterTrue + 1
} else {
counterFalse = counterFalse + 1
}
}
# calculating the effect size
d = (mean(obs1)-mean(obs2))/(sqrt((sd(obs1)**2) + (sd(obs2)**2)))/2
print(paste("Effect size:", d))
print(paste("Alpha:", alpha))
print(paste("Reject hypothesis:", counterFalse))
print(paste("Accept hypothesis:", counterTrue))
}
alphas = c(0.01, 0.05)
# lets generate 1000 t-tests to better look in the properties
for (alpha in alphas) {
nTests = 100
counterTrue = 0
counterFalse = 0
for (interable in 1:nTests) {
# take two samples from DIFFERENT populations
obs1 = rnorm(50, mean=45, sd=3)
obs2 = rnorm(50, mean=45, sd=3)
ttest = t.test(obs1, obs2)
if (ttest$p.value > alpha) {
counterTrue = counterTrue + 1
} else {
counterFalse = counterFalse + 1
}
}
# calculating the effect size
d = (mean(obs1)-mean(obs2))/(sqrt((sd(obs1)**2) + (sd(obs2)**2)))/2
print(paste("Effect size:", d))
print(paste("Alpha:", alpha))
print(paste("Reject hypothesis:", counterFalse))
print(paste("Accept hypothesis:", counterTrue))
}
pwr.t.test(n=100, sig.level=.05, power=NULL)
pwr.t.test(n=100, sig.level=.05, power=.2)
power = power.t.test(obs1, obs2)
?power.t.test
power
pwr.t.test(n=100, sig.level=.05, power=1)
hist(obs1)
par(new=TRUE)
hist(obs2, col='red')
power
power = pwr.t2n.test(obs1, obs2)
power = pwr.t2n.test(obs1, obs2, sig.level = d)
alphas = c(0.01, 0.05)
# lets generate 1000 t-tests to better look in the properties
for (alpha in alphas) {
nTests = 100
counterTrue = 0
counterFalse = 0
for (interable in 1:nTests) {
# take two samples from DIFFERENT populations
obs1 = rnorm(50, mean=45, sd=3)
obs2 = rnorm(50, mean=45, sd=3)
ttest = t.test(obs1, obs2)
if (ttest$p.value > alpha) {
counterTrue = counterTrue + 1
} else {
counterFalse = counterFalse + 1
}
}
# calculating the effect size
d = (mean(obs1)-mean(obs2))/(sqrt((sd(obs1)**2) + (sd(obs2)**2)))/2
print(paste("Effect size:", d))
# calculating power
print(paste("Alpha:", alpha))
print(paste("Reject hypothesis:", counterFalse))
print(paste("Accept hypothesis:", counterTrue))
}
pwr.t.test(n=100, sig.level=.05, power=0.052)
sqrt((sd(obs1)**2) + (sd(obs2)**2))
sd(obs1)**2)
sd(obs1)**2
(sd(obs1)**2)
(sd(obs2)**2)
sqrt((sd(obs1)**2) + (sd(obs2)**2))
sqrt((sd(obs1)**2) + (sd(obs2)**2))/2
(sqrt((sd(obs1)**2) + (sd(obs2)**2)))/2
d
pwr.t.test(n=50, sig.level=.05, power=0.052)
d
obs1 = rnorm(50, mean=45, sd=3)
obs3 = rnorm(50, mean=45, sd=3)
obs1 == obs3
mean(obs1)
mean(obs2)
alphas = c(0.05)
# lets generate 1000 t-tests to better look in the properties
for (alpha in alphas) {
nTests = 100
counterTrue = 0
counterFalse = 0
for (interable in 1:nTests) {
# take two samples from DIFFERENT populations
obs1 = rnorm(50, mean=45, sd=3)
obs2 = rnorm(50, mean=50, sd=3)
ttest = t.test(obs1, obs2)
if (ttest$p.value > alpha) {
counterTrue = counterTrue + 1
} else {
counterFalse = counterFalse + 1
}
}
# calculating the effect size
d = (mean(obs1)-mean(obs2))/(sqrt((sd(obs1)**2) + (sd(obs2)**2)))/2
print(paste("Effect size:", d))
# calculating power
print(paste("Alpha:", alpha))
print(paste("Reject hypothesis:", counterFalse))
print(paste("Accept hypothesis:", counterTrue))
}
alphas = c(0.05)
# lets generate 1000 t-tests to better look in the properties
for (alpha in alphas) {
nTests = 100
counterTrue = 0
counterFalse = 0
for (interable in 1:nTests) {
# take two samples from DIFFERENT populations
obs1 = rnorm(50, mean=51, sd=3)
obs2 = rnorm(50, mean=50, sd=3)
ttest = t.test(obs1, obs2)
if (ttest$p.value > alpha) {
counterTrue = counterTrue + 1
} else {
counterFalse = counterFalse + 1
}
}
# calculating the effect size
d = (mean(obs1)-mean(obs2))/(sqrt((sd(obs1)**2) + (sd(obs2)**2)))/2
print(paste("Effect size:", d))
# calculating power
print(paste("Alpha:", alpha))
print(paste("Reject hypothesis:", counterFalse))
print(paste("Accept hypothesis:", counterTrue))
}
pwr.t.test(n=100, d=.2, sig.level=.01) # -> 0.12034
for(x in 1:1000){
sample1 = rnorm(12,50,5)
sample2 = rnorm(12,51,5)
ttest = t.test(sample1, sample2)
p_vals = c(p_vals, ttest$p.value)
}
sum(p.value)
p_val = c()
for(x in 1:1000){
sample1 = rnorm(12,50,5)
sample2 = rnorm(12,51,5)
ttest = t.test(sample1, sample2)
p_val = c(p_val, ttest$p.value)
}
sum(p.value)
pwr.t.test(n=100, d=.2, sig.level=.01) # -> 0.12034
p_val = c()
for(x in 1:1000){
sample1 = rnorm(12,50,5)
sample2 = rnorm(12,51,5)
ttest = t.test(sample1, sample2, var.equal=TRUE)
p_val = c(p_val, ttest$p.value)
}
sum(p.value)
p_val = c(p_val, ttest$p.value)
for(x in 1:1000){
sample1 = rnorm(12,50,5)
sample2 = rnorm(12,51,5)
ttest = t.test(sample1, sample2, var.equal=TRUE)
p_val = c(p_val, ttest$p.value)
}
sum(p.value)
p_val = c()
for(x in 1:1000){
sample1 = rnorm(12,50,5)
sample2 = rnorm(12,51,5)
ttest = t.test(sample1, sample2, var.equal=TRUE)
p_val = c(p_val, ttest$p.value)
}
sum(p_val)
pwr.t.test(n=100, d=.2, sig.level=.01) # -> 0.12034
for(x in 1:1000){
sample1 = rnorm(50,50,5)
sample2 = rnorm(50,51,5)
ttest = t.test(sample1, sample2, var.equal=TRUE)
p_val = c(p_val, ttest$p.value)
}
sum(p_val)
nrow(data)
nrow(datafull)
data
names(data)
head(data)
data = read.csv('SD_beauty_data.csv')
names(data)
head(data)
?lm
fit = lm(data$beauty ~ data$health, data=data)
fit
summary(fit)
plot(fit)
residuals(fit)
fit = lm(beauty ~ health, data=data)
summary(fit)
fit = lm(beautysad ~ health, data=data)
fit = lm(beauty ~ health, data=data)
summary(fit)
plot(fit)
plot(x=data$beauty, y=data$health)
plot(data$beauty, data$health, cex = 1.3, col = "blue")
plot(data$beauty, data$health, cex = 1, col = "blue")
plot(data$beauty, data$health, cex = 0.5, col = "blue")
plot(data$beauty, data$health, cex = 0.3, col = "blue")
plot(data$beauty, data$health, pch = 16, cex = 0.3, col = "blue")
plot(data$beauty, data$health, pch = 16, cex = 1, col = "blue")
plot(data$beauty, data$health, pch = 16, cex = 0.4, col = "blue")
plot(data$beauty, data$health, pch = 12, cex = 0.4, col = "blue")
plot(data$beauty, data$health, pch = 12, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 4, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 1, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 1, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 2, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 3, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 4, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 5, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 6, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 7, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 8, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 9, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 10, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 11, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 12, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 13, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 14, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 15, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 16, cex = 0.6, col = "blue")
plot(data$beauty, data$health, pch = 16, cex = 0.5, col = "blue")
fit = lm(beauty ~ health, data=data)
summary(fit)
plot(data$beauty, data$health, pch = 16, cex = 0.5, col = "blue")
abline(lm(beauty ~ health, data=data))
abline(lm(beauty ~ health, data=data), col='red')
abline(lm(beauty ~ health, data=data), col='red', lwd=2)
abline(lm(beauty ~ health, data=data), col='red', lwd=3)
plot(data$beauty, data$health, pch = 16, cex = 0.5, col = "darkseagreen")
abline(lm(beauty ~ health, data=data), col='red', lwd=3)
plot(data$beauty, data$health, pch = 16, cex = 0.7, col = "darkseagreen")
plot(data$beauty, data$health, pch = 16, cex = 0.5, col = "lightblue")
plot(data$beauty, data$health, pch = 16, cex = 0.5, col = "navy")
abline(lm(beauty ~ health, data=data), col='red', lwd=3)
plot(data$beauty, data$health, pch = 16, cex = 0.5, col = "navy")
abline(lm(beauty ~ health, data=data), col='red', lwd=3)
summary(fit)
head(data)
data(sd>0)
data(data$sd>0)
test = subset(data$ds>0)
test = subset(x = data$ds>0)
test = subset(data, ds>0)
test = subset(data, sd>0)
test
test = subset(data, sd>7)
test
test = subset(data, sd=1)
test
head(data)
hist(data$sd)
test = subset(data, sd>0)
test
test = subset(data, sd=1)
test
test2 = subset(data, sd=0)
test2
plot(x=test, y=test2)
nrow(test)
nrow(test2)
nrow(data)
test2
names(test2)
test = subset(data, sd==1)
nrow(test)
test2 = subset(data, sd==0)
nrow(test2)
plot(x=test, y=test2)
plot(x=test$health, y=test2$health)
test[2]
test[2,:]
test[2,]
test2[2,]
sdY = subset(data, sd==1)
sdN = subset(data, sd==0)
for rows in test1 {
print(rows)
}
for rows in test {
print(rows)
}
test
test
names(data)
testOrdered = test[order(r_id)]
testOrdered = test[order(test$r_id)]
dfY = data.frame(sdY)
dfN = data.frame(sdN)
# creating the dataframes
dfY
head(data)
dfSleep = dfY[order(r_id)]
dfSleep = dfY[order('r_id')]
dfSleep
head(data)
dfN = data.frame(sdN)
dfY
head(data)
dfY
head(data)
test = dfY[order('f_id', 'r_id'), 'beauty', 'health', 'tire']
test = dfY[order('f_id', 'r_id'), 'beauty', 'health', 'tired']
test = dfY[order('f_id', 'r_id'), 'beauty', 'health']
test = dfY[order('f_id', 'r_id'), 'beauty']
test
test = dfY[order('f_id', 'r_id'), 'beauty']
test
test = dfY[order('f_id', 'r_id')]
test
